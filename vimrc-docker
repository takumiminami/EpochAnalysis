" ----- general settings ----- "
set encoding=utf-8              " Use UTF-8 internally
set fileencodings=utf-8        " Try to read files with UTF-8
set fileencoding=utf-8         " Save files as UTF-8
set fenc=utf-8

set nobackup
set noswapfile
set autoread                    " Auto-reload files modified externally
set hidden                      " Allow switching buffers without saving
set showcmd                     " Show typed command in status line
set noerrorbells
set visualbell

" ----- visual settings ----- "
let g:hybrid_use_iTerm_colors = 1
syntax on
set number
hi LineNr ctermbg=0 ctermfg=7
hi CursorLineNr ctermbg=4 ctermfg=0
set cursorline
hi clear CursorLine
set showmatch
set matchtime=1

" ----- cursor settings ----- "
set virtualedit=onemore         " Allow cursor one character past end
set whichwrap=b,s,h,l,[,],<,>   " Allow cursor to wrap to next/prev line
nnoremap j gj
nnoremap k gk

" ----- indent settings ----- "
set list listchars=tab:>-
set tabstop=4
set shiftwidth=4
set expandtab
set smartindent
filetype plugin indent on

" ----- search settings ----- "
set ignorecase
set smartcase
set incsearch
set wrapscan
set hlsearch
nmap <Esc><Esc> :nohlsearch<CR><Esc>

" ----- misc settings ----- "
inoremap <silent> jj <esc>
set wildmode=list:longest
nmap <F1> :!python3 % <ENTER>
set rtp+=/opt/homebrew/opt/fzf

" ----- plugin settings ----- "
call plug#begin()

Plug 'vim-airline/vim-airline'
Plug 'preservim/nerdtree'
Plug 'github/copilot.vim'
Plug 'Yggdroot/indentLine'

call plug#end()

" ----- plugin configurations ----- "
" NERDTree toggle with <Space>o
nmap <Space>o :NERDTreeToggle<CR>

" GitHub Copilot key bindings
imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
imap <silent><script><expr> <C-K> copilot#Clear()
let g:copilot_no_tab_map = v:true

" indentLine settings
let g:indentLine_char = '│'
let g:indentLine_enabled = 1
let g:indentLine_fileTypeExclude = ['help', 'startify', 'dashboard']


" ----- spell checking ----- "
"set spelllang=en,cjk
"
"fun! s:SpellConf()
"  redir! => syntax
"  silent syntax
"  redir END
"
"  set spell
"
"  if syntax =~? '/<comment\>'
"    syntax spell default
"    syntax match SpellMaybeCode /\<\h\l*[_A-Z]\h\{-}\>/ contains=@NoSpell transparent containedin=Comment contained
"  else
"    syntax spell toplevel
"    syntax match SpellMaybeCode /\<\h\l*[_A-Z]\h\{-}\>/ contains=@NoSpell transparent
"  endif
"
"  syntax cluster Spell add=SpellNotAscii,SpellMaybeCode
"endfunc
"
"augroup spell_check
"  autocmd!
"  autocmd BufReadPost,BufNewFile,Syntax * call s:SpellConf()
"augroup END
"
"" トリガーがONになっていたら set spell を行う
"function! s:set_spell()
"    if get(b:, "set_spell_trigger", 0) && &modifiable
"        let &spell = 1
"        unlet b:set_spell_trigger
"    endif
"endfunction
"
"" バッファの内容が変更されるか保存された時にスペルチェックを行う
"" ただし、実際に有効になるのは CursorHold のタイミング
"" また、カーソル移動を行えば無効にする
"augroup my-setspell
"    autocmd!
"    autocmd BufWritePost,TextChanged,TextChangedI * let b:set_spell_trigger = 1
"    autocmd CursorHold  * call s:set_spell()
""    autocmd CursorMoved * if &spell | set nospell | endif
"augroup END


